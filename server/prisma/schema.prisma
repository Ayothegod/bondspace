generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// spaces        Space[]        @relation("UserSpaces")
// participants  User[]    @relation("UserSpaces")
// outgoingConnections Connection[] @relation("RequestingConnections")
// incomingConnections Connection[] @relation("AcceptingConnections")

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  fullname      String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  avatar        Avatar?
  spaces        UserSpace[]
  messages      Message[]
  notifications Notification[]
  sessions      Session[]
  chats         Chat[]
  games         Player[]
}

model UserSpace {
  userId   String
  spaceId  String
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space    Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@id([userId, spaceId]) // Composite primary key
}

model Space {
  id            String      @id @default(uuid())
  status        String // "ongoing", "finished", "started"
  participants  UserSpace[]
  spaceDuration DateTime?
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  endedAt       DateTime?
  Chat          Chat?
  games         Game[]
}

model Game {
  id           String   @id @default(uuid())
  status       String   @default("waiting") // "ongoing", "finished", "waiting"
  currentRound Int      @default(0) // Tracks the current round number
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  spaceId      String
  Space        Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  rounds  Round[]
  players Player[]
}

model Round {
  id        String    @id @default(uuid())
  roundNum  Int // The number of this round (e.g., 1, 2, 3)
  status    String    @default("ongoing") // "ongoing", "finished"
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  gameId    String
  Game      Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  actions   Action[]
}

model Player {
  id       String   @id @default(uuid())
  userId   String
  gameId   String
  Game     Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())
  chips    Int      @default(1000)
  actions  Action[]
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Action {
  id        String   @id @default(uuid())
  type      String // "fold", "bet", "raise", "call", "check"
  amount    Int? // Amount of chips (if applicable)
  createdAt DateTime @default(now())
  playerId  String
  roundId   String
  Player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  Round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
}

model Chat {
  id           String    @id @default(uuid())
  status       String // e.g., "ongoing", "finished", "startedu"
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants User[]
  name         String?
  spaceId      String    @unique
  Space        Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatId    String?
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sentiment String? // e.g., "positive", "neutral", "negative"
}

model Avatar {
  id          String   @id @default(uuid())
  description String // Text input from the user
  imageURL    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String   @unique
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(uuid())
  content     String
  type        String // e.g., "friend_request", "game_invite"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  read        Boolean  @default(false)
}

// model Connection {
//   id          String   @id @default(uuid())
//   requesterId String
//   requester   User     @relation("RequestingConnections", fields: [requesterId], references: [id], onDelete: Cascade)
//   accepterId  String
//   accepter    User     @relation("AcceptingConnections", fields: [accepterId], references: [id], onDelete: Cascade)
//   status      String 
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }
