generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  fullname      String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  avatar        Avatar?
  spaces        Space[]        @relation("UserSpaces")
  messages      Message[]
  notifications Notification[]
  sessions      Session[]
  chats         Chat[]

  // outgoingConnections Connection[] @relation("RequestingConnections")
  // incomingConnections Connection[] @relation("AcceptingConnections")
}
model Space {
  id            String    @id @default(uuid())
  status        String // "ongoing", "finished", "started"
  participants  User[]    @relation("UserSpaces")
  spaceDuration DateTime?
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  endedAt       DateTime?
  // chatId        String?
  Chat          Chat?
}
model Chat {
  id            String    @id @default(uuid())
  status        String // e.g., "ongoing", "finished", "startedu"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  participants  User[]
  spaceId       String    @unique
  Space         Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Avatar {
  id          String   @id @default(uuid())
  description String // Text input from the user
  imageURL    String
  createdAt   DateTime @default(now())
  ownerId     String   @unique
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}


// model UserSpace {
//   userId    String
//   spaceId    String
//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   space      Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
//   @@id([userId, spaceId]) 
// }


model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatId    String?
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sentiment String // e.g., "positive", "neutral", "negative"
}

// model Connection {
//   id          String   @id @default(uuid())
//   requesterId String
//   requester   User     @relation("RequestingConnections", fields: [requesterId], references: [id], onDelete: Cascade)
//   accepterId  String
//   accepter    User     @relation("AcceptingConnections", fields: [accepterId], references: [id], onDelete: Cascade)
//   status      String 
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model Notification {
  id          String   @id @default(uuid())
  content     String
  type        String // e.g., "friend_request", "game_invite"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  read        Boolean  @default(false)
}
