// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  username            String         @unique
  email               String         @unique
  password            String
  createdAt           DateTime       @default(now())
  avatar              Avatar?
  avatarId            String?
  gameSessions        GameSession[]  @relation("PlayerSessions")
  messages            Message[]
  notifications       Notification[]
  sessions            Session[]
  outgoingConnections Connection[]   @relation("RequestingConnections")

  incomingConnections Connection[] @relation("AcceptingConnections")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model GameSession {
  id          String    @id @default(uuid())
  gameType    String //"chat", "message", "game"
  status      String // e.g., "ongoing", "finished", "started"
  createdAt   DateTime  @default(now())
  players     User[]    @relation("PlayerSessions")
  rounds      Int
  name        String
  isGroupGame Boolean   @default(true)
  messages    Message[]
}

model Message {
  id        String       @id @default(uuid())
  content   String
  createdAt DateTime     @default(now())
  senderId  String
  sender    User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  sessionId String?
  session   GameSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sentiment String // e.g., "positive", "neutral", "negative"
}

model Avatar {
  id          String   @id @default(uuid())
  description String // Text input from the user
  imageURL    String
  createdAt   DateTime @default(now())
  ownerId     String   @unique
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Connection {
  id          String   @id @default(uuid())
  requesterId String
  requester   User     @relation("RequestingConnections", fields: [requesterId], references: [id], onDelete: Cascade)
  accepterId  String
  accepter    User     @relation("AcceptingConnections", fields: [accepterId], references: [id], onDelete: Cascade)
  status      String // e.g., "pending", "accepted", "declined"
  createdAt   DateTime @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  content     String
  type        String // e.g., "friend_request", "game_invite"
  createdAt   DateTime @default(now())
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  read        Boolean  @default(false)
}
